# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hent.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, os, threading
from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia

from err import Ui_Dialog

import downloader

class Communicate(QtCore.QObject):
    progressSignal = QtCore.pyqtSignal(int)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.err_dialog = None
        self.threadpool = QtCore.QThreadPool()
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(638, 492)
        MainWindow.setMinimumSize(QtCore.QSize(638, 492))
        MainWindow.setMaximumSize(QtCore.QSize(638, 492))
        MainWindow.setWindowIcon(QtGui.QIcon('resources/icon.ico'))
        self.HentaiMaster = QtWidgets.QWidget(MainWindow)
        self.HentaiMaster.setObjectName("HentaiMaster")
        self.Service = QtWidgets.QComboBox(self.HentaiMaster)
        self.Service.setGeometry(QtCore.QRect(10, 210, 301, 61))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Service.setFont(font)
        self.Service.setAcceptDrops(False)
        self.Service.setDuplicatesEnabled(False)
        self.Service.setFrame(True)
        self.Service.setObjectName("Service")
        self.Service.addItem("")
        self.Service.addItem("")
        self.Service.addItem("")

        self.Service.currentTextChanged.connect(self.onChange)

        self.Logo = QtWidgets.QLabel(self.HentaiMaster)
        self.Logo.setGeometry(QtCore.QRect(0, 0, 641, 491))
        self.Logo.setText("")
        self.Logo.setPixmap(QtGui.QPixmap("resources/hent.png"))
        self.Logo.setScaledContents(True)
        self.Logo.setObjectName("Logo")
        self.Rating = QtWidgets.QComboBox(self.HentaiMaster)
        self.Rating.setGeometry(QtCore.QRect(320, 210, 311, 61))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Rating.setFont(font)
        self.Rating.setAcceptDrops(False)
        self.Rating.setCurrentText("")
        self.Rating.setDuplicatesEnabled(False)
        self.Rating.setFrame(True)
        self.Rating.setObjectName("Rating")
        self.Rating.addItem("")
        self.Rating.addItem("")
        self.Rating.addItem("")
        self.Rating.addItem("")
        self.Rating.addItem("")
        self.Tag = QtWidgets.QLineEdit(self.HentaiMaster)
        self.Tag.setGeometry(QtCore.QRect(10, 280, 621, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Tag.setFont(font)
        self.Tag.setObjectName("Tag")
        self.KometaStartButton = QtWidgets.QPushButton(self.HentaiMaster)
        self.KometaStartButton.setGeometry(QtCore.QRect(340, 400, 291, 51))
        font = QtGui.QFont()
        font.setFamily("BIPs")
        font.setPointSize(12)

        self.progressBar = QtWidgets.QProgressBar(self.HentaiMaster)
        self.progressBar.setGeometry(QtCore.QRect(230, 460, 401, 20))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")

        self.comm = Communicate()
        self.comm.progressSignal.connect(self.updateBar)

        self.KometaStartButton.setFont(font)
        self.KometaStartButton.setStyleSheet("")
        self.KometaStartButton.setObjectName("KometaStartButton")

        self.KometaStartButton.clicked.connect(self.onStart)

        self.Browse = QtWidgets.QPushButton(self.HentaiMaster)
        self.Browse.setGeometry(QtCore.QRect(540, 340, 91, 51))
        self.Browse.setObjectName("Browse")

        self.Browse.clicked.connect(self.onBrowse)

        self.Path = QtWidgets.QLineEdit(self.HentaiMaster)
        self.Path.setEnabled(False)
        self.Path.setGeometry(QtCore.QRect(340, 340, 191, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Path.setFont(font)
        self.Path.setObjectName("Path")
        self.Pages = QtWidgets.QLineEdit(self.HentaiMaster)
        self.Pages.setGeometry(QtCore.QRect(180, 340, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Pages.setFont(font)
        self.Pages.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.Pages.setText("")
        self.Pages.setObjectName("Pages")
        self.StratPages = QtWidgets.QLineEdit(self.HentaiMaster)
        self.StratPages.setGeometry(QtCore.QRect(180, 400, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.StratPages.setFont(font)
        self.StratPages.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.StratPages.setText("")
        self.StratPages.setObjectName("StratPages")
        self.AkiraKagami = QtWidgets.QLabel(self.HentaiMaster)
        self.AkiraKagami.setGeometry(QtCore.QRect(0, 330, 181, 161))
        self.AkiraKagami.setText("")
        self.AkiraKagami.setPixmap(QtGui.QPixmap("resources/Акира.png"))
        self.AkiraKagami.setScaledContents(True)
        self.AkiraKagami.setObjectName("AkiraKagami")

        self.AkiraKagami.mousePressEvent = self.onPress
        self.AkiraKagami_toggle = False

        self.Trevor = QtWidgets.QPushButton(self.HentaiMaster)
        self.Trevor.setGeometry(QtCore.QRect(180, 460, 41, 23))
        font = QtGui.QFont()
        font.setKerning(True)
        self.Trevor.setFont(font)
        self.Trevor.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/Screenshot_1.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Trevor.setIcon(icon)
        self.Trevor.setIconSize(QtCore.QSize(44, 30))
        self.Trevor.setCheckable(False)
        self.Trevor.setObjectName("Trevor")

        self.Trevor.clicked.connect(lambda: os.system("start https://youtu.be/lTo1PiGCUFo"))

        self.Logo.raise_()
        self.Service.raise_()
        self.Rating.raise_()
        self.Tag.raise_()
        self.progressBar.raise_()
        self.KometaStartButton.raise_()
        self.Browse.raise_()
        self.Path.raise_()
        self.Pages.raise_()
        self.StratPages.raise_()
        self.AkiraKagami.raise_()
        self.Trevor.raise_()
        MainWindow.setCentralWidget(self.HentaiMaster)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def onPress(self, e):
        if self.Service.currentText() == "Danbooru":
            self.AkiraKagami_toggle = not self.AkiraKagami_toggle
            if self.AkiraKagami_toggle:
                self.AkiraKagami.setPixmap(QtGui.QPixmap("resources/Акира1.png"))
                self.Tag.setEnabled(False)
                self.Tag.setText("Most viewed")
            else:
                self.AkiraKagami.setPixmap(QtGui.QPixmap("resources/Акира.png"))
                self.Tag.setEnabled(True)
                self.Tag.setText("")
        else:
            self.AkiraKagami_toggle = False
            self.AkiraKagami.setPixmap(QtGui.QPixmap("resources/Акира.png"))
            self.Tag.setEnabled(True)
            self.Tag.setText("")

    def onBrowse(self):
        self.folder = QtWidgets.QFileDialog.getExistingDirectory(None, 'Open File', './')
        self.Path.setText(self.folder)

    def onChange(self):
        if self.Service.currentText() != "Danbooru":
            self.AkiraKagami_toggle = False
            self.AkiraKagami.setPixmap(QtGui.QPixmap("resources/Акира.png"))
            self.Tag.setEnabled(True)
            self.Tag.setText("")

    def onStart(self):
        try: 
            start_page = int(self.StratPages.text())
            pages = int(self.Pages.text())
        except ValueError:
            # show error dialog
            self.err_dialog = Ui_Dialog("Set number of pages")
            self.err_dialog.show()
            QtMultimedia.QSound.play("resources/error.wav")
            return
        
        tag = self.Tag.text()
        
        service = self.Service.currentText()
        rating = self.Rating.currentText()
        folder = self.Path.text()
        most_viewed = self.AkiraKagami_toggle
        if folder == "":
            # show error dialog
            self.err_dialog = Ui_Dialog("Select folder path")
            self.err_dialog.show()
            QtMultimedia.QSound.play("resources/error.wav")
            return

        if len(tag) < 1:
            # show error dialog
            self.err_dialog = Ui_Dialog("Add at least 1 tag")
            self.err_dialog.show()
            QtMultimedia.QSound.play("resources/error.wav")
            return

        self.Service.setEnabled(False)
        self.Rating.setEnabled(False)
        self.StratPages.setEnabled(False)
        self.Pages.setEnabled(False)
        self.Tag.setEnabled(False)
        self.Browse.setEnabled(False)
        self.KometaStartButton.setEnabled(False)

        worker = downloader.Worker(downloader.main, service, rating, tag, pages, start_page, folder, most_viewed, self.comm.progressSignal)
        self.threadpool.start(worker)

        self.Service.setEnabled(True)
        self.Rating.setEnabled(True)
        self.StratPages.setEnabled(True)
        self.Pages.setEnabled(True)
        self.Tag.setEnabled(True)
        self.Browse.setEnabled(True)
        self.KometaStartButton.setEnabled(True)
    
    def updateBar(self, percent):
        self.progressBar.setValue(percent)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Hentai Master"))
        self.Service.setPlaceholderText(_translate("MainWindow", "Chose Service", "Chose Service"))
        self.Service.setItemText(0, _translate("MainWindow", "Danbooru"))
        self.Service.setItemText(1, _translate("MainWindow", "Lolibooru"))
        self.Service.setItemText(2, _translate("MainWindow", "Rule34"))
        self.Rating.setPlaceholderText(_translate("MainWindow", "Chose Rating", "Chose Rating"))
        self.Rating.setItemText(0, _translate("MainWindow", "Ignore Rating"))
        self.Rating.setItemText(1, _translate("MainWindow", "General (Completely safe for work)"))
        self.Rating.setItemText(2, _translate("MainWindow", "Sensitive (Ecchi, sexy, suggestive, or mildly erotic)"))
        self.Rating.setItemText(3, _translate("MainWindow", "Questionable (Softcore erotica)"))
        self.Rating.setItemText(4, _translate("MainWindow", "Explicit (Hardcore erotica)"))
        self.Tag.setPlaceholderText(_translate("MainWindow", "Enter your Tags (Sample: gawr_gura)"))
        self.KometaStartButton.setText(_translate("MainWindow", "Start!"))
        self.Browse.setText(_translate("MainWindow", "Browse"))
        self.Path.setPlaceholderText(_translate("MainWindow", "Path"))
        self.Pages.setPlaceholderText(_translate("MainWindow", "Pages"))
        self.StratPages.setPlaceholderText(_translate("MainWindow", "Starting page"))

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec_())